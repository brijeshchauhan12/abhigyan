{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var FORGATE = 'FORGATE';\nexport var forgatepass = function forgatepass(data) {\n  return {\n    type: FORGATE,\n    st_id: data\n  };\n};\nexport var forgating = function forgating(school_id, mobile) {\n  return function _callee(dispatch) {\n    var details, formBody, property, encodedKey, encodedValue, response, resdata;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            details = {\n              school_id: school_id,\n              mobile: mobile\n            };\n            formBody = [];\n\n            for (property in details) {\n              encodedKey = encodeURIComponent(property);\n              encodedValue = encodeURIComponent(details[property]);\n              formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(fetch('http://ais.omsai.info/api/v1/forgot_password', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: formBody\n            }));\n\n          case 6:\n            response = _context.sent;\n\n            if (!(response.status != 200)) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(\"there may be some entries missing\");\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resdata = _context.sent;\n            dispatch(forgatepass(resdata.data.st_id));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var resetforgating = function resetforgating(student_id, otp, new_password, confirm_password) {\n  return function _callee2(dispatch) {\n    var details, formBody, property, encodedKey, encodedValue, response, resdata;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            details = {\n              student_id: student_id,\n              otp: otp,\n              new_password: new_password,\n              confirm_password: confirm_password\n            };\n            formBody = [];\n\n            for (property in details) {\n              encodedKey = encodeURIComponent(property);\n              encodedValue = encodeURIComponent(details[property]);\n              formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(fetch('http://abhigyaan.local/api/v1/reset_password', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: formBody\n            }));\n\n          case 6:\n            response = _context2.sent;\n\n            if (!(response.status != 200)) {\n              _context2.next = 9;\n              break;\n            }\n\n            throw new Error(\"there may be some entries missing\");\n\n          case 9:\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resdata = _context2.sent;\n            console.log(\"resetpassword data\");\n            console.log(resdata);\n            console.log(\"end\");\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/Projects/react_native/Abhigyaan/store/action/forgatepassword.js"],"names":["FORGATE","forgatepass","data","type","st_id","forgating","school_id","mobile","dispatch","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","headers","body","response","status","Error","json","resdata","resetforgating","student_id","otp","new_password","confirm_password","console","log"],"mappings":"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","sourcesContent":["export const FORGATE='FORGATE'\r\nexport const forgatepass=(data)=>{\r\n    return {type:FORGATE,st_id:data}\r\n}\r\nexport const forgating=(school_id,mobile)=>{\r\n    \r\n    return async dispatch=>{\r\n\r\n      let details = {\r\n        school_id:school_id,\r\n      mobile:mobile\r\n     \r\n    };\r\n\r\n    let formBody = [];\r\n    for (let property in details) {\r\n        let encodedKey = encodeURIComponent(property);\r\n        let encodedValue = encodeURIComponent(details[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n\r\n   const response=await fetch('http://ais.omsai.info/api/v1/forgot_password', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: formBody\r\n    })\r\n    if(response.status!=200){\r\n        throw new Error(\"there may be some entries missing\")\r\n    }\r\n    const resdata=await response.json();\r\n\r\n   //dispatch(authenticate(otp))\r\n//    console.log(\"hi this is what you are looking for\")\r\n//    console.log(resdata)\r\n//    console.log(resdata.data.otp)\r\n        dispatch(forgatepass(resdata.data.st_id))\r\n//    console.log(\"end\")\r\n    }\r\n}\r\nexport const resetforgating=(student_id,otp,new_password,confirm_password)=>{\r\n    \r\n    return async dispatch=>{\r\n\r\n      let details = {\r\n         student_id:student_id,\r\n         otp:otp,\r\n         new_password:new_password,\r\n         confirm_password:confirm_password\r\n    };\r\n\r\n    let formBody = [];\r\n    for (let property in details) {\r\n        let encodedKey = encodeURIComponent(property);\r\n        let encodedValue = encodeURIComponent(details[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n\r\n   const response=await fetch('http://abhigyaan.local/api/v1/reset_password', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: formBody\r\n    })\r\n    if(response.status!=200){\r\n\r\n\r\n        throw new Error(\"there may be some entries missing\")\r\n\r\n    }\r\n    const resdata=await response.json();\r\n\r\n   //dispatch(authenticate(otp))\r\n   console.log(\"resetpassword data\")\r\n   console.log(resdata)\r\n\r\n   console.log(\"end\")\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}