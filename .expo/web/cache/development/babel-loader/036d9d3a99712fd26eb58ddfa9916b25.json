{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var FORGATE = 'FORGATE';\nexport var forgatepass = function forgatepass(data) {\n  return {\n    type: FORGATE,\n    st_id: data\n  };\n};\nexport var forgating = function forgating(school_id, mobile) {\n  return function _callee(dispatch) {\n    var details, formBody, property, encodedKey, encodedValue, response, resdata;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            details = {\n              school_id: school_id,\n              mobile: mobile\n            };\n            formBody = [];\n\n            for (property in details) {\n              encodedKey = encodeURIComponent(property);\n              encodedValue = encodeURIComponent(details[property]);\n              formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(fetch('http://ais.omsai.info/api/v1/forgot_password', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: formBody\n            }));\n\n          case 6:\n            response = _context.sent;\n\n            if (!(response.status != 200)) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(\"there may be some entries missing\");\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resdata = _context.sent;\n            dispatch(forgatepass(resdata.data.st_id));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var resetforgating = function resetforgating(student_id, otp, new_password, confirm_password) {\n  return function _callee2(dispatch) {\n    var details, formBody, property, encodedKey, encodedValue, response, resdata;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            details = {\n              student_id: student_id,\n              otp: otp,\n              new_password: new_password,\n              confirm_password: confirm_password\n            };\n            formBody = [];\n\n            for (property in details) {\n              encodedKey = encodeURIComponent(property);\n              encodedValue = encodeURIComponent(details[property]);\n              formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(fetch('http://abhigyaan.local/api/v1/reset_password', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: formBody\n            }));\n\n          case 6:\n            response = _context2.sent;\n\n            if (!(response.status != 200)) {\n              _context2.next = 9;\n              break;\n            }\n\n            throw new Error(\"there may be some entries missing\");\n\n          case 9:\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resdata = _context2.sent;\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/brijesh/Desktop/Abhigyaan-main/store/action/forgatepassword.js"],"names":["FORGATE","forgatepass","data","type","st_id","forgating","school_id","mobile","dispatch","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","headers","body","response","status","Error","json","resdata","resetforgating","student_id","otp","new_password","confirm_password"],"mappings":"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","sourcesContent":["export const FORGATE='FORGATE'\nexport const forgatepass=(data)=>{\n    return {type:FORGATE,st_id:data}\n}\nexport const forgating=(school_id,mobile)=>{\n    return async dispatch=>{\n        let details = {\n            school_id:school_id,\n            mobile:mobile\n        }\n\n        let formBody = [];\n        for (let property in details) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(details[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n        formBody = formBody.join(\"&\");\n\n        const response=await fetch('http://ais.omsai.info/api/v1/forgot_password', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: formBody\n        })\n        if(response.status!=200){\n            throw new Error(\"there may be some entries missing\")\n        }\n        const resdata=await response.json();\n        dispatch(forgatepass(resdata.data.st_id))\n    }\n}\nexport const resetforgating=(student_id,otp,new_password,confirm_password)=>{\n    return async dispatch=>{\n        let details = {\n            student_id:student_id,\n            otp:otp,\n            new_password:new_password,\n            confirm_password:confirm_password\n        };\n\n        let formBody = [];\n        for (let property in details) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(details[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n        formBody = formBody.join(\"&\");\n\n        const response=await fetch('http://abhigyaan.local/api/v1/reset_password', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: formBody\n        })\n        if(response.status!=200){\n            throw new Error(\"there may be some entries missing\")\n        }\n        const resdata=await response.json();\n    }\n}"]},"metadata":{},"sourceType":"module"}