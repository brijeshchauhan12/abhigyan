{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/brijesh/Desktop/Abhigyaan-main/App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport ReduxThunk from 'redux-thunk';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport App1 from \"./navigation\";\nimport AuthReducer from \"./store/reducer/auth\";\nimport Boardlist from \"./store/reducer/boardlist\";\nimport OtpVerification from \"./store/reducer/otpverification\";\nimport Fog from \"./store/reducer/forgatepassword\";\nimport Subjectlist from \"./store/reducer/subjectlist\";\nimport Topicandvideo from \"./store/reducer/topicandvideo\";\nimport Authname from \"./store/reducer/authname\";\nimport StudentId from \"./store/reducer/stduntidauth\";\nimport Profileofst from \"./store/reducer/profile\";\nimport Classlist from \"./store/reducer/classlist\";\nvar rootReducer = combineReducers({\n  Auth: AuthReducer,\n  OTP: OtpVerification,\n  Allboard: Boardlist,\n  Fog: Fog,\n  Sub: Subjectlist,\n  Topic_Video: Topicandvideo,\n  Authname: Authname,\n  StudentId: StudentId,\n  Profileofst: Profileofst,\n  Classlist: Classlist\n});\nvar store = createStore(rootReducer, applyMiddleware(ReduxThunk));\n\nvar fetchfonts = function fetchfonts() {\n  return Font.loadAsync({\n    'Poppins-Bold': require(\"./assets/fonts/Poppins-Bold.ttf\"),\n    'Poppins-Regular': require(\"./assets/fonts/Poppins-Regular.ttf\"),\n    'Poppins-Black': require(\"./assets/fonts/Poppins-Black.ttf\"),\n    'Poppins-Light': require(\"./assets/fonts/Poppins-Light.ttf\"),\n    'Rubik-Bold': require(\"./assets/fonts/Rubik-Bold.ttf\"),\n    'Rubik-Medium': require(\"./assets/fonts/Rubik-Medium.ttf\"),\n    'Rubik-Regular': require(\"./assets/fonts/Rubik-Regular.ttf\"),\n    \"Rubik-Light\": require(\"./assets/fonts/Rubik-Light.ttf\"),\n    \"Poppins-SemiBold\": require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\n    \"PlayfairDisplay-Bold\": require(\"./assets/fonts/PlayfairDisplay-Bold.ttf\"),\n    \"Roboto-Regular\": require(\"./assets/fonts/Roboto-Regular.ttf\"),\n    \"Roboto-Light\": require(\"./assets/fonts/Roboto-Light.ttf\")\n  });\n};\n\nvar Main = function Main() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontloaded = _useState2[0],\n      setfontloaded = _useState2[1];\n\n  if (!fontloaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchfonts,\n      onFinish: function onFinish() {\n        setfontloaded(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, React.createElement(App1, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default Main;","map":{"version":3,"sources":["/home/brijesh/Desktop/Abhigyaan-main/App.js"],"names":["StatusBar","React","useEffect","useState","createStore","combineReducers","applyMiddleware","Provider","ReduxThunk","AppLoading","Font","App1","AuthReducer","Boardlist","OtpVerification","Fog","Subjectlist","Topicandvideo","Authname","StudentId","Profileofst","Classlist","rootReducer","Auth","OTP","Allboard","Sub","Topic_Video","store","fetchfonts","loadAsync","require","Main","fontloaded","setfontloaded","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;;;;AAGA,SAAQC,WAAR,EAAoBC,eAApB,EAAoCC,eAApC,QAA0D,OAA1D;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAAQC,UAAR,QAAyB,MAAzB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,IAAP;AACA,OAAOC,WAAP;AACA,OAAOC,SAAP;AACA,OAAOC,eAAP;AACA,OAAOC,GAAP;AACA,OAAOC,WAAP;AACA,OAAQC,aAAR;AACA,OAAOC,QAAP;AACA,OAAOC,SAAP;AACA,OAAOC,WAAP;AACA,OAAOC,SAAP;AAGA,IAAMC,WAAW,GAACjB,eAAe,CAAC;AAC7BkB,EAAAA,IAAI,EAACX,WADwB;AAE7BY,EAAAA,GAAG,EAACV,eAFyB;AAG7BW,EAAAA,QAAQ,EAACZ,SAHoB;AAI7BE,EAAAA,GAAG,EAACA,GAJyB;AAK7BW,EAAAA,GAAG,EAACV,WALyB;AAM7BW,EAAAA,WAAW,EAACV,aANiB;AAO7BC,EAAAA,QAAQ,EAACA,QAPoB;AAQ7BC,EAAAA,SAAS,EAACA,SARmB;AAS7BC,EAAAA,WAAW,EAACA,WATiB;AAU7BC,EAAAA,SAAS,EAACA;AAVmB,CAAD,CAAjC;AAYA,IAAMO,KAAK,GAAExB,WAAW,CAACkB,WAAD,EAAahB,eAAe,CAACE,UAAD,CAA5B,CAAxB;;AACA,IAAMqB,UAAU,GAAC,SAAXA,UAAW,GAAI;AACnB,SAAQnB,IAAI,CAACoB,SAAL,CAAe;AACrB,oBAAeC,OAAO,mCADD;AAErB,uBAAkBA,OAAO,sCAFJ;AAGrB,qBAAgBA,OAAO,oCAHF;AAIrB,qBAAgBA,OAAO,oCAJF;AAKrB,kBAAaA,OAAO,iCALC;AAMrB,oBAAeA,OAAO,mCAND;AAOrB,qBAAgBA,OAAO,oCAPF;AAQrB,mBAAcA,OAAO,kCARA;AASrB,wBAAmBA,OAAO,uCATL;AAUrB,4BAAuBA,OAAO,2CAVT;AAWrB,sBAAiBA,OAAO,qCAXH;AAYrB,oBAAeA,OAAO;AAZD,GAAf,CAAR;AAcA,CAfF;;AAqEA,IAAMC,IAAI,GAAC,SAALA,IAAK,GAAK;AAAA,kBACmB7B,QAAQ,CAAC,KAAD,CAD3B;AAAA;AAAA,MACP8B,UADO;AAAA,MACIC,aADJ;;AAEd,MAAG,CAACD,UAAJ,EAAe;AACb,WAAO,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAEJ,UAAxB;AAAoC,MAAA,QAAQ,EAAE,oBAAI;AACvDK,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAGD;;AAED,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEN,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAbD;;AAeA,IAAMO,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf;AAQA,eAAeV,IAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React,{useEffect, useState} from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n// import {Provider} from 'react-native-paper';\nimport {createStore,combineReducers,applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport ReduxThunk from 'redux-thunk';\nimport {AppLoading} from 'expo'\nimport * as Font from 'expo-font'\nimport App1 from \"./navigation\";\nimport AuthReducer from'./store/reducer/auth';\nimport Boardlist from './store/reducer/boardlist';\nimport OtpVerification from './store/reducer/otpverification';\nimport Fog from \"./store/reducer/forgatepassword\";\nimport Subjectlist from './store/reducer/subjectlist';\nimport  Topicandvideo from './store/reducer/topicandvideo';\nimport Authname from './store/reducer/authname';\nimport StudentId from './store/reducer/stduntidauth';\nimport Profileofst from './store/reducer/profile';\nimport Classlist from './store/reducer/classlist';\n\n//import PushNotification from 'react-native-push-notification'\nconst rootReducer=combineReducers({\n     Auth:AuthReducer,\n     OTP:OtpVerification,\n     Allboard:Boardlist,\n     Fog:Fog,\n     Sub:Subjectlist,\n     Topic_Video:Topicandvideo,\n     Authname:Authname,\n     StudentId:StudentId,\n     Profileofst:Profileofst,\n     Classlist:Classlist\n})\nconst store =createStore(rootReducer,applyMiddleware(ReduxThunk))\nconst fetchfonts=()=>{\n  return  Font.loadAsync({\n    'Poppins-Bold':require('./assets/fonts/Poppins-Bold.ttf') ,\n    'Poppins-Regular':require(\"./assets/fonts/Poppins-Regular.ttf\"),\n    'Poppins-Black':require(\"./assets/fonts/Poppins-Black.ttf\"),\n    'Poppins-Light':require(\"./assets/fonts/Poppins-Light.ttf\"),\n    'Rubik-Bold':require(\"./assets/fonts/Rubik-Bold.ttf\"),\n    'Rubik-Medium':require(\"./assets/fonts/Rubik-Medium.ttf\"),\n    'Rubik-Regular':require(\"./assets/fonts/Rubik-Regular.ttf\"),\n    \"Rubik-Light\":require(\"./assets/fonts/Rubik-Light.ttf\"),\n    \"Poppins-SemiBold\":require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\n    \"PlayfairDisplay-Bold\":require(\"./assets/fonts/PlayfairDisplay-Bold.ttf\"),\n    \"Roboto-Regular\":require(\"./assets/fonts/Roboto-Regular.ttf\"),\n    \"Roboto-Light\":require(\"./assets/fonts/Roboto-Light.ttf\")\n   })\n }\n\n  \n//  PushNotification.configure({\n//   // (optional) Called when Token is generated (iOS and Android)\n//   onRegister: function (token) {\n//     console.log(\"TOKEN:\", token);\n//   },\n\n//   // (required) Called when a remote is received or opened, or local notification is opened\n//   onNotification: function (notification) {\n//     console.log(\"NOTIFICATION:\", notification);\n\n//     // process the notification\n\n//     // (required) Called when a remote is received or opened, or local notification is opened\n//    // notification.finish(PushNotificationIOS.FetchResult.NoData);\n//   },\n\n//   // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)\n//   // onAction: function (notification) {\n//   //   console.log(\"ACTION:\", notification.action);\n//   //   console.log(\"NOTIFICATION:\", notification);\n\n//   //   // process the action\n//   // },\n\n//   // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)\n//   // onRegistrationError: function(err) {\n//   //   console.error(err.message, err);\n//   // },\n\n//   // IOS ONLY (optional): default: all - Permissions to register.\n//   permissions: {\n//     alert: true,\n//     badge: true,\n//     sound: true,\n//   },\n\n//   // Should the initial notification be popped automatically\n//   // default: true\n//   popInitialNotification: true,\n\n//   /**\n//    * (optional) default: true\n//    * - Specified if permissions (ios) and token (android and ios) will requested or not,\n//    * - if not, you must call PushNotificationsHandler.requestPermissions() later\n//    * - if you are not using remote notification or do not have Firebase installed, use this:\n//    *     requestPermissions: Platform.OS === 'ios'\n//    */\n//   requestPermissions: true,\n// });\n\n\nconst Main=()=> {\n  const [fontloaded,setfontloaded]=useState(false);\n  if(!fontloaded){\n    return <AppLoading startAsync={fetchfonts} onFinish={()=>{\n      setfontloaded(true)\n    }}/>\n  }\n\n  return (\n    <Provider store={store}>\n      <App1/>\n    </Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}