{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nexport var AUTHENTICATEOTP = 'AUTHENTICATEOTP';\nexport var AUTHENTICATEUSER = 'AUTHENTICATEUSER';\nexport var ACCESSUSER = 'ACCESSUSER';\nexport var USERDETAILL = 'USERDETAILL';\nexport var USERDETAILLALL = 'USERDETAILLALL';\nexport var DONOTALLOW = 'DONOTALLOW';\nexport var STDETAIL = 'STDETAIL';\nexport var accesslogin = function accesslogin(status) {\n  return {\n    type: ACCESSUSER,\n    status: status\n  };\n};\nexport var authenticateotp = function authenticateotp(otp) {\n  return {\n    type: AUTHENTICATEOTP,\n    otp: otp\n  };\n};\nexport var authenticateuser = function authenticateuser(stu_id) {\n  return {\n    type: AUTHENTICATEUSER,\n    stu_id: stu_id\n  };\n};\nexport var userdetail = function userdetail(data) {\n  return {\n    type: USERDETAILL,\n    data: data\n  };\n};\nexport var userdetailalls = function userdetailalls(data) {\n  return {\n    type: USERDETAILLALL,\n    Alldata: data\n  };\n};\nexport var donotallowuser = function donotallowuser(data) {\n  return {\n    type: DONOTALLOW,\n    ttr: data\n  };\n};\nexport var studentidd = function studentidd(data) {\n  return {\n    type: STDETAIL,\n    tts: data\n  };\n};\nexport var login = function login(school_id, mobile, password) {\n  return function _callee(dispatch) {\n    var details, formBody, property, encodedKey, encodedValue, response, resdata;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            details = {\n              school_id: school_id,\n              mobile: mobile,\n              password: password\n            };\n            formBody = [];\n\n            for (property in details) {\n              encodedKey = encodeURIComponent(property);\n              encodedValue = encodeURIComponent(details[property]);\n              formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(fetch('http://ais.omsai.info/api/v1/login', {\n              method: 'POST',\n              headers: {\n                'Authorization': 'Bearer token',\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: formBody\n            }));\n\n          case 6:\n            response = _context.sent;\n\n            if (!(response.status != 200)) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error('error');\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resdata = _context.sent;\n            dispatch(userdetailalls(resdata.data.st_name));\n            dispatch(accesslogin(resdata.status));\n            dispatch(studentidd(resdata.data.st_id));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var Signupp = function Signupp(school_id, board_id, mobile, password, name) {\n  return function _callee2(dispatch) {\n    var details, formBody, property, encodedKey, encodedValue, response, resdata, credentials;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            details = {\n              school_id: school_id,\n              board_id: board_id,\n              mobile: mobile,\n              password: password,\n              name: name\n            };\n            formBody = [];\n\n            for (property in details) {\n              encodedKey = encodeURIComponent(property);\n              encodedValue = encodeURIComponent(details[property]);\n              formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(fetch('http://ais.omsai.info/api/v1/register', {\n              method: 'POST',\n              headers: {\n                'Authorization': 'Bearer token',\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: formBody\n            }));\n\n          case 6:\n            response = _context2.sent;\n\n            if (!(response.status != 200)) {\n              _context2.next = 9;\n              break;\n            }\n\n            throw new Error('error');\n\n          case 9:\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resdata = _context2.sent;\n            credentials = resdata.data;\n            dispatch(authenticateotp(credentials.otp));\n            dispatch(authenticateuser(credentials.st_id));\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/Projects/react_native/Abhigyaan/store/action/auth.js"],"names":["AUTHENTICATEOTP","AUTHENTICATEUSER","ACCESSUSER","USERDETAILL","USERDETAILLALL","DONOTALLOW","STDETAIL","accesslogin","status","type","authenticateotp","otp","authenticateuser","stu_id","userdetail","data","userdetailalls","Alldata","donotallowuser","ttr","studentidd","tts","login","school_id","mobile","password","dispatch","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","headers","body","response","Error","json","resdata","st_name","st_id","Signupp","board_id","name","credentials"],"mappings":"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","sourcesContent":["import {AsyncStorage} from 'react-native';\r\nexport const AUTHENTICATEOTP='AUTHENTICATEOTP';\r\nexport const AUTHENTICATEUSER='AUTHENTICATEUSER';\r\nexport const ACCESSUSER='ACCESSUSER';\r\nexport const USERDETAILL='USERDETAILL';\r\nexport const USERDETAILLALL='USERDETAILLALL';\r\nexport const DONOTALLOW='DONOTALLOW';\r\nexport const STDETAIL='STDETAIL';\r\nexport const accesslogin=(status)=>{\r\n    return{type:ACCESSUSER,status:status}\r\n}\r\nexport const authenticateotp=(otp)=>{\r\n    return {type:AUTHENTICATEOTP,otp:otp}\r\n}\r\nexport const authenticateuser=(stu_id)=>{\r\n    return{type:AUTHENTICATEUSER,stu_id:stu_id}\r\n}\r\nexport const userdetail=(data)=>{\r\n    return{ type:USERDETAILL,data:data}\r\n}\r\nexport const userdetailalls=(data)=>{\r\n    return {type:USERDETAILLALL,Alldata:data}\r\n}\r\nexport const donotallowuser=(data)=>{\r\n    return{type:DONOTALLOW,ttr:data}\r\n}\r\nexport const studentidd=(data)=>{\r\n    return{type:STDETAIL,tts:data}\r\n}\r\nexport const login=(school_id,mobile,password)=>{\r\n    \r\n    return async dispatch=>{\r\n\r\n      let details = {\r\n        school_id:school_id,\r\n        mobile:mobile,\r\n        password:password,\r\n    };\r\n\r\n    let formBody = [];\r\n    for (let property in details) {\r\n        let encodedKey = encodeURIComponent(property);\r\n        let encodedValue = encodeURIComponent(details[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n\r\n   const response=await fetch('http://ais.omsai.info/api/v1/login', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': 'Bearer token',\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: formBody\r\n    })\r\n    if(response.status!=200){\r\n        throw new Error('error')\r\n    }\r\n    const resdata=await response.json();\r\n    // console.log(\"this is data of logged user\")\r\n    //  console.log(resdata)\r\n    //  console.log(\"end\")\r\n    //  console.log(\"this is databoardid\"+resdata.data.br_id)\r\n    // dispatch(username(resdata.data.st_name))\r\n  \r\n     //console.log(resdata.data)\r\n     dispatch(userdetailalls(resdata.data.st_name)) \r\n     //dispatch(userdetail(resdata.data.st_name))\r\n     //console.log(resdata.data.st_name)\r\n     dispatch(accesslogin(resdata.status))  \r\n     dispatch(studentidd(resdata.data.st_id)) \r\n    }\r\n}\r\nexport const Signupp=(school_id,board_id,mobile,password,name)=>{\r\n    // console.log(\"lllllllllllllllllllllllllllllll\")\r\n    // console.log(name +school_id+board_id+mobile+password)\r\n    // console.log(\"llllllllllllllllllllllllll\")\r\n    return async dispatch=>{\r\n\r\n      let details = {\r\n        school_id:school_id,\r\n        board_id:board_id,\r\n        mobile:mobile,\r\n        password:password,\r\n        name:name,\r\n    };\r\n\r\n    let formBody = [];\r\n    for (let property in details) {\r\n        let encodedKey = encodeURIComponent(property);\r\n        let encodedValue = encodeURIComponent(details[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n\r\n   const response=await fetch('http://ais.omsai.info/api/v1/register', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': 'Bearer token',\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: formBody\r\n    })\r\n    if(response.status!=200){\r\n        throw new Error('error')\r\n    }\r\n    const resdata=await response.json();\r\n    const  credentials=resdata.data\r\n    dispatch(authenticateotp(credentials.otp))\r\n    dispatch(authenticateuser(credentials.st_id))\r\n// console.log(credentials.otp)\r\n// console.log(credentials.st_id)\r\n// console.log(\"***********************\")\r\n// console.log(\"this is the signup response\")\r\n// console.log(resdata) \r\n// console.log(\"**************************\")\r\n    }\r\n}\r\n\r\n// const  credentials=resdata.data\r\n// dispatch(authenticateotp(credentials.otp))\r\n// dispatch(authenticateuser(credentials.st_id))\r\n// console.log(credentials.otp)\r\n// console.log(credentials.st_id)\r\n// console.log(resdata)"]},"metadata":{},"sourceType":"module"}