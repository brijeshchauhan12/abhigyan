{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var SUBJECTLIST = 'SUBJECTLIST';\nexport var CLASSID = 'CLASSID';\nexport var CLASSARRAY = 'CLASSARRAY';\nexport var classlist = function classlist(data) {\n  return {\n    type: CLASSARRAY,\n    classar: data\n  };\n};\nexport var classidsend = function classidsend(data) {\n  return {\n    type: CLASSID,\n    class_id: data\n  };\n};\nexport var allsubjectlist = function allsubjectlist(data) {\n  return {\n    type: SUBJECTLIST,\n    dataarray: data\n  };\n};\nexport var subject_list = function subject_list(school_id, board_id) {\n  return function _callee(dispatch) {\n    var details, formBody, property, encodedKey, encodedValue, response, resdata, dar;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            details = {\n              school_id: school_id,\n              board_id: board_id\n            };\n            formBody = [];\n\n            for (property in details) {\n              encodedKey = encodeURIComponent(property);\n              encodedValue = encodeURIComponent(details[property]);\n              formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(fetch('http://ais.omsai.info/api/v1/subject_list', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: formBody\n            }));\n\n          case 6:\n            response = _context.sent;\n\n            if (!(response.status != 200)) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(\"there may be some entries missing\");\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resdata = _context.sent;\n            dar = resdata.data;\n            dispatch(allsubjectlist(dar));\n            console.log(\"this is ***** subject list\");\n            console.log(resdata);\n            console.log(\"sujectlist end\");\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var classlistALL = function classlistALL(school_id, board_id) {\n  return function _callee2(dispatch) {\n    var details, formBody, property, encodedKey, encodedValue, response, resdata, classarray;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            details = {\n              school_id: school_id,\n              board_id: board_id\n            };\n            formBody = [];\n\n            for (property in details) {\n              encodedKey = encodeURIComponent(property);\n              encodedValue = encodeURIComponent(details[property]);\n              formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(fetch('http://ais.omsai.info/api/v1/class_list', {\n              method: 'POST',\n              headers: {\n                'Authorization': 'Bearer token',\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: formBody\n            }));\n\n          case 6:\n            response = _context2.sent;\n\n            if (!(response.status != 200)) {\n              _context2.next = 9;\n              break;\n            }\n\n            throw new Error(\"there may be some entries missing\");\n\n          case 9:\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resdata = _context2.sent;\n            classarray = resdata.data;\n            dispatch(classlist(classarray));\n            console.log(\"this is ***** class list\");\n            console.log(resdata);\n            console.log(\"sujectlist end\");\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/Projects/react_native/Abhigyaan/store/action/subjectlist.js"],"names":["SUBJECTLIST","CLASSID","CLASSARRAY","classlist","data","type","classar","classidsend","class_id","allsubjectlist","dataarray","subject_list","school_id","board_id","dispatch","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","headers","body","response","status","Error","json","resdata","dar","console","log","classlistALL","classarray"],"mappings":";AAAA,OAAO,IAAMA,WAAW,GAAC,aAAlB;AACP,OAAO,IAAMC,OAAO,GAAC,SAAd;AACP,OAAO,IAAMC,UAAU,GAAC,YAAjB;AACP,OAAO,IAAMC,SAAS,GAAC,SAAVA,SAAU,CAACC,IAAD,EAAQ;AAC3B,SAAM;AAACC,IAAAA,IAAI,EAACH,UAAN;AAAiBI,IAAAA,OAAO,EAACF;AAAzB,GAAN;AACH,CAFM;AAGP,OAAO,IAAMG,WAAW,GAAC,SAAZA,WAAY,CAACH,IAAD,EAAQ;AAC7B,SAAM;AAACC,IAAAA,IAAI,EAACJ,OAAN;AAAcO,IAAAA,QAAQ,EAACJ;AAAvB,GAAN;AACH,CAFM;AAGP,OAAO,IAAMK,cAAc,GAAC,SAAfA,cAAe,CAACL,IAAD,EAAQ;AAChC,SAAO;AAACC,IAAAA,IAAI,EAACL,WAAN;AAAkBU,IAAAA,SAAS,EAACN;AAA5B,GAAP;AACH,CAFM;AAIP,OAAO,IAAMO,YAAY,GAAC,SAAbA,YAAa,CAACC,SAAD,EAAWC,QAAX,EAAsB;AAE5C,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDC,YAAAA,OAFC,GAES;AACZH,cAAAA,SAAS,EAACA,SADE;AAEZC,cAAAA,QAAQ,EAACA;AAFG,aAFT;AAOHG,YAAAA,QAPG,GAOQ,EAPR;;AAQP,iBAASC,QAAT,IAAqBF,OAArB,EAA8B;AACtBG,cAAAA,UADsB,GACTC,kBAAkB,CAACF,QAAD,CADT;AAEtBG,cAAAA,YAFsB,GAEPD,kBAAkB,CAACJ,OAAO,CAACE,QAAD,CAAR,CAFX;AAG1BD,cAAAA,QAAQ,CAACK,IAAT,CAAcH,UAAU,GAAG,GAAb,GAAmBE,YAAjC;AACH;;AACDJ,YAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AAbO;AAAA,6CAeaC,KAAK,CAAC,2CAAD,EAA8C;AACnEC,cAAAA,MAAM,EAAE,MAD2D;AAEnEC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX,eAF0D;AAKnEC,cAAAA,IAAI,EAAEV;AAL6D,aAA9C,CAflB;;AAAA;AAeFW,YAAAA,QAfE;;AAAA,kBAsBJA,QAAQ,CAACC,MAAT,IAAiB,GAtBb;AAAA;AAAA;AAAA;;AAAA,kBAuBG,IAAIC,KAAJ,CAAU,mCAAV,CAvBH;;AAAA;AAAA;AAAA,6CAyBaF,QAAQ,CAACG,IAAT,EAzBb;;AAAA;AAyBDC,YAAAA,OAzBC;AA0BDC,YAAAA,GA1BC,GA0BID,OAAO,CAAC3B,IA1BZ;AAgCRU,YAAAA,QAAQ,CAACL,cAAc,CAACuB,GAAD,CAAf,CAAR;AAEAC,YAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAE,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AApCQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAuCH,CAzCM;AA0CP,OAAO,IAAMC,YAAY,GAAC,SAAbA,YAAa,CAACvB,SAAD,EAAWC,QAAX,EAAsB;AAE5C,SAAO,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDC,YAAAA,OAFC,GAES;AACZH,cAAAA,SAAS,EAACA,SADE;AAEZC,cAAAA,QAAQ,EAACA;AAFG,aAFT;AASHG,YAAAA,QATG,GASQ,EATR;;AAUP,iBAASC,QAAT,IAAqBF,OAArB,EAA8B;AACtBG,cAAAA,UADsB,GACTC,kBAAkB,CAACF,QAAD,CADT;AAEtBG,cAAAA,YAFsB,GAEPD,kBAAkB,CAACJ,OAAO,CAACE,QAAD,CAAR,CAFX;AAG1BD,cAAAA,QAAQ,CAACK,IAAT,CAAcH,UAAU,GAAG,GAAb,GAAmBE,YAAjC;AACH;;AACDJ,YAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AAfO;AAAA,6CAiBaC,KAAK,CAAC,yCAAD,EAA4C;AACjEC,cAAAA,MAAM,EAAE,MADyD;AAEjEC,cAAAA,OAAO,EAAE;AACL,iCAAiB,cADZ;AAEL,gCAAgB;AAFX,eAFwD;AAMjEC,cAAAA,IAAI,EAAEV;AAN2D,aAA5C,CAjBlB;;AAAA;AAiBFW,YAAAA,QAjBE;;AAAA,kBAyBJA,QAAQ,CAACC,MAAT,IAAiB,GAzBb;AAAA;AAAA;AAAA;;AAAA,kBA4BG,IAAIC,KAAJ,CAAU,mCAAV,CA5BH;;AAAA;AAAA;AAAA,6CA+BaF,QAAQ,CAACG,IAAT,EA/Bb;;AAAA;AA+BDC,YAAAA,OA/BC;AAgCDK,YAAAA,UAhCC,GAgCUL,OAAO,CAAC3B,IAhClB;AAsCRU,YAAAA,QAAQ,CAACX,SAAS,CAACiC,UAAD,CAAV,CAAR;AAEAH,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAE,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AA1CQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA6CH,CA/CM","sourcesContent":["export const SUBJECTLIST='SUBJECTLIST';\r\nexport const CLASSID='CLASSID';\r\nexport const CLASSARRAY='CLASSARRAY';\r\nexport const classlist=(data)=>{\r\n    return{type:CLASSARRAY,classar:data}\r\n}\r\nexport const classidsend=(data)=>{\r\n    return{type:CLASSID,class_id:data}\r\n}\r\nexport const allsubjectlist=(data)=>{\r\n    return {type:SUBJECTLIST,dataarray:data}\r\n}\r\n\r\nexport const subject_list=(school_id,board_id)=>{\r\n    \r\n    return async dispatch=>{\r\n\r\n      let details = {\r\n        school_id:school_id,\r\n        board_id:board_id\r\n    };\r\n\r\n    let formBody = [];\r\n    for (let property in details) {\r\n        let encodedKey = encodeURIComponent(property);\r\n        let encodedValue = encodeURIComponent(details[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n\r\n   const response=await fetch('http://ais.omsai.info/api/v1/subject_list', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: formBody\r\n    })\r\n    if(response.status!=200){\r\n        throw new Error(\"there may be some entries missing\")\r\n    }\r\n    const resdata=await response.json();\r\n    const dar =resdata.data\r\n    // const array=[];\r\n    // for(const num=0;num<dar.length;num++){\r\n    //     array.append(dar[i])\r\n    // }\r\n\r\n   dispatch(allsubjectlist(dar))\r\n\r\n   console.log(\"this is ***** subject list\")\r\n   console.log(resdata)\r\n   console.log(\"sujectlist end\")\r\n\r\n    }\r\n}\r\nexport const classlistALL=(school_id,board_id)=>{\r\n    \r\n    return async dispatch=>{\r\n\r\n      let details = {\r\n        school_id:school_id,\r\n        board_id:board_id,\r\n        \r\n     \r\n    };\r\n\r\n    let formBody = [];\r\n    for (let property in details) {\r\n        let encodedKey = encodeURIComponent(property);\r\n        let encodedValue = encodeURIComponent(details[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n\r\n   const response=await fetch('http://ais.omsai.info/api/v1/class_list', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': 'Bearer token',\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: formBody\r\n    })\r\n    if(response.status!=200){\r\n\r\n\r\n        throw new Error(\"there may be some entries missing\")\r\n\r\n    }\r\n    const resdata=await response.json();\r\n    const classarray=resdata.data\r\n    // const array=[];\r\n    // for(const num=0;num<dar.length;num++){\r\n    //     array.append(dar[i])\r\n    // }\r\n\r\n   dispatch(classlist(classarray))\r\n\r\n   console.log(\"this is ***** class list\")\r\n   console.log(resdata)\r\n   console.log(\"sujectlist end\")\r\n\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}