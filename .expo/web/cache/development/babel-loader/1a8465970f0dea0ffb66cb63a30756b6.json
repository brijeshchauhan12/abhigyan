{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/brijesh/Desktop/Abhigyaan-main/screens/more.js\";\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nimport React, { useState, useEffect, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: true,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\n\nvar More = function More(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'space-around'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Your expo push token: \", expoPushToken), React.createElement(View, {\n    style: {\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, \"Title: \", notification && notification.request.content.title, \" \"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"Body: \", notification && notification.request.content.body), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, \"Data: \", notification && JSON.stringify(notification.request.content.data))), React.createElement(Button, {\n    title: \"Press to Send Notification\",\n    onPress: function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(sendPushNotification(expoPushToken));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }));\n};\n\nfunction sendPushNotification(expoPushToken) {\n  var message;\n  return _regeneratorRuntime.async(function sendPushNotification$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          message = {\n            to: expoPushToken,\n            sound: 'default',\n            title: 'Push Notification Examples',\n            body: 'And here is the body!',\n            data: {\n              data: 'goes here'\n            }\n          };\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Accept-encoding': 'gzip, deflate',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(message)\n          }));\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context4.next = 21;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 3:\n          _await$Permissions$ge = _context4.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context4.next = 12;\n            break;\n          }\n\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 9:\n          _await$Permissions$as = _context4.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context4.next = 15;\n            break;\n          }\n\n          Alert.alert('An Error Occurred!', 'Failed to get push token for push notification!', [{\n            text: 'Okay'\n          }]);\n          return _context4.abrupt(\"return\");\n\n        case 15:\n          _context4.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context4.sent.data;\n          console.log(token);\n          _context4.next = 22;\n          break;\n\n        case 21:\n          Alert.alert('An Error Occurred!', 'Must use physical device for Push Notifications', [{\n            text: 'Okay'\n          }]);\n\n        case 22:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context4.abrupt(\"return\", token);\n\n        case 24:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default More;","map":{"version":3,"sources":["/home/brijesh/Desktop/Abhigyaan-main/screens/more.js"],"names":["Constants","Notifications","Permissions","React","useState","useEffect","useRef","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","More","navigation","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","registerForPushNotificationsAsync","then","token","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","console","log","removeNotificationSubscription","flex","alignItems","justifyContent","request","content","title","body","JSON","stringify","data","sendPushNotification","message","to","sound","fetch","method","headers","Accept","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","Alert","alert","text","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Alert, Platform } from 'react-native';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: false,\n  })\n});\n\nconst More=({navigation})=>{\n    const [expoPushToken, setExpoPushToken] = useState('');\n    const [notification, setNotification] = useState(false);\n    const notificationListener = useRef();\n    const responseListener = useRef();\n\n    useEffect(() => {\n        registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n\n        // This listener is fired whenever a notification is received while the app is foregrounded\n        notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n            setNotification(notification);\n        });\n\n        // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n        responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n            console.log(response);\n        });\n\n        return () => {\n            Notifications.removeNotificationSubscription(notificationListener);\n            Notifications.removeNotificationSubscription(responseListener);\n        };\n    }, []);\n\n    return(\n        <View\n            style={{\n                flex: 1,\n                alignItems: 'center',\n                justifyContent: 'space-around',\n            }}>\n            <Text>Your expo push token: {expoPushToken}</Text>\n            <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n                <Text>Title: {notification && notification.request.content.title} </Text>\n                <Text>Body: {notification && notification.request.content.body}</Text>\n                <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n            </View>\n            <Button\n                title=\"Press to Send Notification\"\n                onPress={async () => {\n                await sendPushNotification(expoPushToken);\n                }}\n            />\n        </View>\n    )\n}\n\n// Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/notifications\nasync function sendPushNotification(expoPushToken) {\n    const message = {\n      to: expoPushToken,\n      sound: 'default',\n      title: 'Push Notification Examples',\n      body: 'And here is the body!',\n      data: { data: 'goes here' },\n    };\n  \n    await fetch('https://exp.host/--/api/v2/push/send', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Accept-encoding': 'gzip, deflate',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(message),\n    });\n  }\n  \n  async function registerForPushNotificationsAsync() {\n    let token;\n    if (Constants.isDevice) {\n      const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        Alert.alert('An Error Occurred!', 'Failed to get push token for push notification!', [{ text: 'Okay' }]);\n        return;\n      }\n      token = (await Notifications.getExpoPushTokenAsync()).data;\n      console.log(token);\n    } else {\n      Alert.alert('An Error Occurred!', 'Must use physical device for Push Notifications', [{ text: 'Okay' }]);\n    }\n  \n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n  \n    return token;\n  }  \n\nexport default More;"]},"metadata":{},"sourceType":"module"}