{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\n\nvar isPortrait = function isPortrait() {\n  var dim = Dimensions.get('screen');\n  return dim.height >= dim.width;\n};\n\nexport function useOrientation() {\n  var _useState = useState(isPortrait() ? 'PORTRAIT' : 'LANDSCAPE'),\n      _useState2 = _slicedToArray(_useState, 2),\n      orientation = _useState2[0],\n      setOrientation = _useState2[1];\n\n  useEffect(function () {\n    var callback = function callback() {\n      return setOrientation(isPortrait() ? 'PORTRAIT' : 'LANDSCAPE');\n    };\n\n    Dimensions.addEventListener('change', callback);\n    return function () {\n      Dimensions.removeEventListener('change', callback);\n    };\n  }, []);\n  return orientation;\n}","map":{"version":3,"sources":["/home/brijesh/Desktop/Abhigyaan-main/components/useOrientation.js"],"names":["useEffect","useState","isPortrait","dim","Dimensions","get","height","width","useOrientation","orientation","setOrientation","callback","addEventListener","removeEventListener"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;;;AAMA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,MAAMC,GAAG,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAZ;AACA,SAAOF,GAAG,CAACG,MAAJ,IAAcH,GAAG,CAACI,KAAzB;AACD,CAHD;;AASA,OAAO,SAASC,cAAT,GAAoD;AAAA,kBAEnBP,QAAQ,CAC5CC,UAAU,KAAK,UAAL,GAAkB,WADgB,CAFW;AAAA;AAAA,MAElDO,WAFkD;AAAA,MAErCC,cAFqC;;AAMzDV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMW,QAAQ,GAAG,SAAXA,QAAW;AAAA,aAAMD,cAAc,CAACR,UAAU,KAAK,UAAL,GAAkB,WAA7B,CAApB;AAAA,KAAjB;;AAEAE,IAAAA,UAAU,CAACQ,gBAAX,CAA4B,QAA5B,EAAsCD,QAAtC;AAEA,WAAO,YAAM;AACXP,MAAAA,UAAU,CAACS,mBAAX,CAA+B,QAA/B,EAAyCF,QAAzC;AACD,KAFD;AAGD,GARQ,EAQN,EARM,CAAT;AAUA,SAAOF,WAAP;AACD","sourcesContent":["import {useEffect, useState} from 'react';\nimport {Dimensions} from 'react-native';\n\n/**\n * Returns true if the screen is in portrait mode\n */\nconst isPortrait = () => {\n  const dim = Dimensions.get('screen');\n  return dim.height >= dim.width;\n};\n\n/**\n * A React Hook which updates when the orientation changes\n * @returns whether the user is in 'PORTRAIT' or 'LANDSCAPE'\n */\nexport function useOrientation(): 'PORTRAIT' | 'LANDSCAPE' {\n  // State to hold the connection status\n  const [orientation, setOrientation] = useState(\n    isPortrait() ? 'PORTRAIT' : 'LANDSCAPE',\n  );\n\n  useEffect(() => {\n    const callback = () => setOrientation(isPortrait() ? 'PORTRAIT' : 'LANDSCAPE');\n\n    Dimensions.addEventListener('change', callback);\n\n    return () => {\n      Dimensions.removeEventListener('change', callback);\n    };\n  }, []);\n\n  return orientation;\n}"]},"metadata":{},"sourceType":"module"}