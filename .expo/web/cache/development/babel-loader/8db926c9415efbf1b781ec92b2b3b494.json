{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var PROF = 'PROF';\nexport var userprofille = function userprofille(status) {\n  return {\n    type: PROF,\n    datta: status\n  };\n};\nexport var profileofstudent = function profileofstudent(student_id) {\n  return function _callee(dispatch) {\n    var details, formBody, property, encodedKey, encodedValue, response, resdata;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            details = {\n              student_id: student_id\n            };\n            formBody = [];\n\n            for (property in details) {\n              encodedKey = encodeURIComponent(property);\n              encodedValue = encodeURIComponent(details[property]);\n              formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(fetch('http://ais.omsai.info/api/v1/profile_detail', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: formBody\n            }));\n\n          case 6:\n            response = _context.sent;\n\n            if (!(response.status != 200)) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(\"there may be some entries missing\");\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resdata = _context.sent;\n            dispatch(userprofille(resdata.data));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/brijesh/Desktop/Abhigyaan-main/store/action/profile.js"],"names":["PROF","userprofille","status","type","datta","profileofstudent","student_id","dispatch","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","headers","body","response","Error","json","resdata","data"],"mappings":";AAAA,OAAO,IAAMA,IAAI,GAAC,MAAX;AAEP,OAAO,IAAMC,YAAY,GAAC,SAAbA,YAAa,CAACC,MAAD,EAAU;AAChC,SAAO;AAACC,IAAAA,IAAI,EAACH,IAAN;AAAWI,IAAAA,KAAK,EAACF;AAAjB,GAAP;AACH,CAFM;AAIP,OAAO,IAAMG,gBAAgB,GAAC,SAAjBA,gBAAiB,CAACC,UAAD,EAAc;AACxC,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,OADD,GACW;AACVF,cAAAA,UAAU,EAACA;AADD,aADX;AAKCG,YAAAA,QALD,GAKY,EALZ;;AAMH,iBAASC,QAAT,IAAqBF,OAArB,EAA8B;AACtBG,cAAAA,UADsB,GACTC,kBAAkB,CAACF,QAAD,CADT;AAEtBG,cAAAA,YAFsB,GAEPD,kBAAkB,CAACJ,OAAO,CAACE,QAAD,CAAR,CAFX;AAG1BD,cAAAA,QAAQ,CAACK,IAAT,CAAcH,UAAU,GAAG,GAAb,GAAmBE,YAAjC;AACH;;AACDJ,YAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AAXG;AAAA,6CAakBC,KAAK,CAAC,6CAAD,EAAgD;AACtEC,cAAAA,MAAM,EAAE,MAD8D;AAEtEC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX,eAF6D;AAKtEC,cAAAA,IAAI,EAAEV;AALgE,aAAhD,CAbvB;;AAAA;AAaGW,YAAAA,QAbH;;AAAA,kBAoBAA,QAAQ,CAAClB,MAAT,IAAiB,GApBjB;AAAA;AAAA;AAAA;;AAAA,kBAqBO,IAAImB,KAAJ,CAAU,mCAAV,CArBP;;AAAA;AAAA;AAAA,6CAuBiBD,QAAQ,CAACE,IAAT,EAvBjB;;AAAA;AAuBGC,YAAAA,OAvBH;AAwBHhB,YAAAA,QAAQ,CAACN,YAAY,CAACsB,OAAO,CAACC,IAAT,CAAb,CAAR;;AAxBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA0BH,CA3BM","sourcesContent":["export const PROF='PROF';\n\nexport const userprofille=(status)=>{\n    return {type:PROF,datta:status}\n}\n\nexport const profileofstudent=(student_id)=>{\n    return async dispatch=>{\n        let details = {\n            student_id:student_id,\n        }\n\n        let formBody = [];\n        for (let property in details) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(details[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n        formBody = formBody.join(\"&\");\n\n        const response=await fetch('http://ais.omsai.info/api/v1/profile_detail', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: formBody\n        })\n        if(response.status!=200){\n            throw new Error(\"there may be some entries missing\")\n        }\n        const resdata=await response.json();\n        dispatch(userprofille(resdata.data))\n    }\n}\n"]},"metadata":{},"sourceType":"module"}