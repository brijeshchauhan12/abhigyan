{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var TOPICARRAY = 'TOPICARRAY';\nexport var topichandle = function topichandle(data) {\n  return {\n    type: TOPICARRAY,\n    topics: data\n  };\n};\nexport var topicandvideo = function topicandvideo(subject_id) {\n  return function _callee(dispatch) {\n    var details, formBody, property, encodedKey, encodedValue, response, resdata, dataa;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            details = {\n              subject_id: subject_id\n            };\n            formBody = [];\n\n            for (property in details) {\n              encodedKey = encodeURIComponent(property);\n              encodedValue = encodeURIComponent(details[property]);\n              formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(fetch('http://ais.omsai.info/api/v1/topic_with_videos', {\n              method: 'POST',\n              headers: {\n                'Authorization': 'Bearer token',\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: formBody\n            }));\n\n          case 6:\n            response = _context.sent;\n\n            if (!(response.status != 200)) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(\"there may be some entries missing\");\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resdata = _context.sent;\n            dataa = resdata.data;\n            _context.next = 15;\n            return _regeneratorRuntime.awrap(dispatch(topichandle(dataa)));\n\n          case 15:\n            console.log(\"this is ***** topics list\");\n            console.log(resdata);\n            console.log(\"topic end end\");\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/Projects/react_native/Abhigyaan/store/action/topicandvideo.js"],"names":["TOPICARRAY","topichandle","data","type","topics","topicandvideo","subject_id","dispatch","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","headers","body","response","status","Error","json","resdata","dataa","console","log"],"mappings":";AACA,OAAO,IAAMA,UAAU,GAAC,YAAjB;AACP,OAAO,IAAMC,WAAW,GAAC,SAAZA,WAAY,CAACC,IAAD,EAAQ;AAC7B,SAAM;AAACC,IAAAA,IAAI,EAACH,UAAN;AAAiBI,IAAAA,MAAM,EAACF;AAAxB,GAAN;AACH,CAFM;AAGP,OAAO,IAAMG,aAAa,GAAC,SAAdA,aAAc,CAACC,UAAD,EAAc;AAErC,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDC,YAAAA,OAFC,GAES;AACZF,cAAAA,UAAU,EAACA;AADC,aAFT;AAMHG,YAAAA,QANG,GAMQ,EANR;;AAOP,iBAASC,QAAT,IAAqBF,OAArB,EAA8B;AACtBG,cAAAA,UADsB,GACTC,kBAAkB,CAACF,QAAD,CADT;AAEtBG,cAAAA,YAFsB,GAEPD,kBAAkB,CAACJ,OAAO,CAACE,QAAD,CAAR,CAFX;AAG1BD,cAAAA,QAAQ,CAACK,IAAT,CAAcH,UAAU,GAAG,GAAb,GAAmBE,YAAjC;AACH;;AACDJ,YAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AAZO;AAAA,6CAcaC,KAAK,CAAC,gDAAD,EAAmD;AACxEC,cAAAA,MAAM,EAAE,MADgE;AAExEC,cAAAA,OAAO,EAAE;AACL,iCAAiB,cADZ;AAEL,gCAAgB;AAFX,eAF+D;AAMxEC,cAAAA,IAAI,EAAEV;AANkE,aAAnD,CAdlB;;AAAA;AAcFW,YAAAA,QAdE;;AAAA,kBAsBJA,QAAQ,CAACC,MAAT,IAAiB,GAtBb;AAAA;AAAA;AAAA;;AAAA,kBAyBG,IAAIC,KAAJ,CAAU,mCAAV,CAzBH;;AAAA;AAAA;AAAA,6CA4BaF,QAAQ,CAACG,IAAT,EA5Bb;;AAAA;AA4BDC,YAAAA,OA5BC;AA6BDC,YAAAA,KA7BC,GA6BKD,OAAO,CAACtB,IA7Bb;AAAA;AAAA,6CAoCCK,QAAQ,CAACN,WAAW,CAACwB,KAAD,CAAZ,CApCT;;AAAA;AAsCRC,YAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAE,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AAxCQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA2CH,CA7CM","sourcesContent":["\r\nexport const TOPICARRAY='TOPICARRAY';\r\nexport const topichandle=(data)=>{\r\n    return{type:TOPICARRAY,topics:data}\r\n}\r\nexport const topicandvideo=(subject_id)=>{\r\n    \r\n    return async dispatch=>{\r\n\r\n      let details = {\r\n        subject_id:subject_id\r\n    };\r\n\r\n    let formBody = [];\r\n    for (let property in details) {\r\n        let encodedKey = encodeURIComponent(property);\r\n        let encodedValue = encodeURIComponent(details[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n\r\n   const response=await fetch('http://ais.omsai.info/api/v1/topic_with_videos', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': 'Bearer token',\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: formBody\r\n    })\r\n    if(response.status!=200){\r\n\r\n\r\n        throw new Error(\"there may be some entries missing\")\r\n\r\n    }\r\n    const resdata=await response.json();\r\n    const dataa=resdata.data\r\n    //  const arraydata=[];\r\n    //  for(const num=0;num<dataa.length;num++){\r\n    //      arraydata.append(dataa[i])\r\n    //      console.log(\"adding\")\r\n    //  }\r\n  //  console.log(arraydata +\"this is array data copied\")\r\n     await  dispatch(topichandle(dataa))\r\n\r\n   console.log(\"this is ***** topics list\")\r\n   console.log(resdata)\r\n   console.log(\"topic end end\")\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}